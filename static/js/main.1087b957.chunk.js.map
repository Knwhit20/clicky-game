{"version":3,"sources":["components/Navbar.js","components/Header.js","components/Cards.js","components/Footer.js","components/Game.js","App.js","serviceWorker.js","index.js"],"names":["style","navbar","background","justifyContent","color","padding","fontSize","Navbar","score","topscore","message","className","jumbotron","Header","class","Cards","handleClick","data","square","i","push","j","map","row","item","onClick","id","src","image","alt","footer","Footer","main","height","overflow","body","Game","state","topScore","handleIncorrectGuess","setState","resetData","clicked","shuffleData","length","Math","floor","random","temp","console","log","find","handleCorrectGuess","this","newScore","newTopScore","max","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1087b957.chunk.js","sourcesContent":["import React from \"react\";\n\n\nconst style = {\n    navbar: {\n        background: \"purple\",\n        justifyContent: \"left\",\n        color: \"white\",\n        padding: \"20px\",\n        fontSize: \"20px\"\n    }\n};\n\nexport default function Navbar({score, topscore, message}) {\n    return (\n        <div>\n            <div>\n                <ul style={style.navbar} className=\"nav d-flex justify-content-around\">\n                    <li className=\"nav-item\">\n                        <a className=\"nav\">Clicky Game</a>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div>\n                            {message}\n                        </div>\n                    </li>\n                    <li className=\"nav-item\">\n                        <div>\n                            Score: {score} | Top Score: {topscore}\n                        </div>\n                    </li>\n\n                </ul>\n            </div>\n        </div>\n    )\n}\n\n","import React from \"react\";\n\nconst style = {\n        jumbotron: {\n        justifyContent: \"center\"\n    }\n};\n\n\n\nfunction Header() {\n    const headerText = \"Click on an image to earn points, but don't click on any more than once!\"\n    return (\n        <div>\n        \n            <div style= {style.jumbotron} class=\"jumbotron jumbotron-fluid\">\n                <div class=\"container\">\n                    <h1 class=\"display-4\">Clicky Game!</h1>\n                    <p class=\"lead\">{headerText}</p>\n                </div>\n            </div>\n\n\n        </div>\n    )\n}\nexport default Header;","import React from 'react';\n\n\nfunction Cards({handleClick, data}) {\n    const rows = 3\n    const columns = 4\n\n    const square = []\n    for (var i = 0; i < rows; i++) {\n        square.push([]);\n        for (var j = 0; j < columns; j++) {\n            square[i].push(data[j + (4 * i)])\n        }\n    }\n\n    return (\n        // <div role=\"img\" onClick={() => props.handleClick(props.id)}>\n        // </div>\n        <div>\n            {square.map((row) => {\n                return (\n                    <div class=\"d-flex justify-content-center\">\n                        {row.map((item) => {\n                            return (\n                                <div className=\"card\" onClick={() => handleClick(item.id)}>\n                                    <img src={item.image} className=\"card-img-top\" alt=\"\" />\n                                </div>\n                            )\n                        })}\n                    </div>\n                )\n            })}\n        </div>\n    )\n}\n\nexport default Cards","import React from \"react\";\n\nconst style = {\n    footer: {\n        background: \"purple\",\n        padding: \"20px\",\n        justifyContent: \"right\"\n    }\n}\n\nfunction Footer(){\n    return(\n        <nav style={style.footer} className=\"navbar navbar-light bg-light\">\n            <a className=\"navbar-brand\">Clicky Game</a>\n        </nav>\n\n    )\n}\n\nexport default Footer;","import React from \"react\";\nimport NavBar from \"./Navbar\"\nimport Header from \"./Header\";\nimport Cards from \"./Cards\";\nimport Footer from \"./Footer\";\nimport data from \"../data.json\";\n\nconst style = {\n    main: {\n        height: '100vh',\n        overflow: 'hidden'\n    },\n    body: {\n        overflow: \"scroll\"\n    }\n}\n\nclass Game extends React.Component{\n    state= {\n        data, \n        score: 0,\n        topScore: 0,\n        message: \"\"\n    };\n\n    componentDidMount() {\n        this.setState({ data })\n    }\n\n    // function to handle correct guess\n    handleCorrectGuess(state) {\n        const {score, topScore} = this.state;\n        const newScore = score + 1;\n        const newTopScore = Math.max(newScore, topScore)\n        const message = \"Correct\"\n\n        this.setState({ \n            data: this.shuffleData(state),\n            score: newScore,\n            topScore: newTopScore,\n            message\n         });\n    }\n    // Handle the incorrect guess, shuffle data\n    handleIncorrectGuess = () => {\n        const message = \"Incorrect\"\n\n        this.setState({\n            data: this.resetData([...this.state.data]),\n            score: 0,\n            message\n    \n        })\n    }\n    //reset data\n    resetData = (data) => {\n        const resetData = data.map(item => ({ ...item, clicked: false }));\n        return this.shuffleData(resetData)\n        \n    }\n    //shuffle data \n    shuffleData = (data) => {\n        let i = data.length - 1;\n        while(i > 0){\n            const j = Math.floor(Math.random()*(i+1));\n            const temp = data[i];\n            data[i] = data[j];\n            data[j] = temp;\n            i--;\n        }\n\n        return data;\n    }\n    // handle item click\n    handleClick = (id) => {\n        console.log('data', this.state.data)\n        const state = [...this.state.data]\n        const item = state.find((item) => {\n            return item.id === id\n        })\n        //check correct or incorrect\n        const correct = !item.clicked\n        if (correct){\n            item.clicked = true\n            this.handleCorrectGuess(state)\n\n        }else{\n            this.handleIncorrectGuess()\n        }\n    }\n\n    \n    //render return\n    render() {\n        return (\n            <div className=\"d-flex flex-column\" style={style.main}>\n                <NavBar score={this.state.score} topscore={this.state.topScore} message={this.state.message}/>\n                <div style={style.body} >\n                    <Header/>\n                    <Cards data={this.state.data} handleClick={this.handleClick}/>\n                </div>\n                <Footer/>\n            </div>\n        )\n    }\n\n}\n\nexport default Game\n\n\n//create ghdeploy\n//hub create\n//git push origin master\n// yarn add gh-pages -D\n\n","import React from 'react';\nimport './App.css';\n\nimport Game from \"./components/Game\";\n\nfunction App() {\n  \n  return (\n    <Game/>\n  )\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}